
fastlane_version "2.53.1"

default_platform :ios

platform :ios do
  desc "Runs all the tests"
  lane :tests do
    #test(scheme: "FastActions", swift_version: "5.0")
    #test(scheme: "FastActions-macOS", swift_version: "5.0")
    #test(scheme: "FastActions-tvOS", swift_version: "5.0")

    test(scheme: "FastActions", swift_version: "4.2")
    test(scheme: "FastActions-macOS", swift_version: "4.2")
    test(scheme: "FastActions-tvOS", swift_version: "4.2")

    #test(scheme: "FastActions", swift_version: "4.0")
    #test(scheme: "FastActions-macOS", swift_version: "4.0")
    #test(scheme: "FastActions-tvOS", swift_version: "4.0")
  end

  lane :test do |options|
    _test(options)
  end

  private_lane :_test do |options|
    if options[:scheme].include? "macOS"
        scan(scheme: options[:scheme], clean: true, xcargs: "SWIFT_VERSION=#{options[:swift_version]}", destination: "platform=macOS")
    else
        scan(scheme: options[:scheme], clean: true, xcargs: "SWIFT_VERSION=#{options[:swift_version]}")
    end
  end

  lane :test_ci do
    test(scheme: ENV["SCHEME"], swift_version: ENV["SWIFT_VERSION"])
  end
  
  desc "Lint"
  lane :lint do
      carthage(command: "build", no_skip_current: true)
      pod_lib_lint
  end

  desc "Release new version"
  lane :release do |options|
      target_version = options[:version]
      raise "The version is missed. Use `fastlane release version:{version_number}`.`" if target_version.nil?

      ensure_git_branch
      ensure_git_status_clean
      
      tests
      lint
      carthage(command: "archive", frameworks: ["FastActions"])
      
      sync_build_number_to_git
      increment_version_number(version_number: target_version)
      version_bump_podspec(path: "FastActions.podspec", version_number: target_version)

      log = extract_current_change_log(version: target_version)
      release_log = update_change_log(log: log)

      doc(version: target_version)

      git_commit_all(message: "Bump version to #{target_version}")
      
      Actions.sh("git tag -s #{target_version} -m ''")

      push_to_git_remote

      set_github_release(
      repository_name: "dengyhgit/FastActions",
      api_token: ENV['GITHUB_TOKEN'],
      name: release_log[:title],
      tag_name: target_version,
      description: release_log[:text],
      upload_assets: ["FastActions.framework.zip"]
      )

      pod_push
  end

  lane :podpush do
    pod_push
  end

  lane :doc do |options|
      target_version = options[:version]
      Actions.sh("cd .. && jazzy \
                        --clean \
                        -x USE_SWIFT_RESPONSE_FILE=NO \
                        --author \"DengYanghao\" \
                        --author_url https://dengyhgit.com \
                        --github_url https://github.com/dengyhgit/FastActions \
                        --github-file-prefix https://github.com/dengyhgit/FastActions/tree/#{target_version} \
                        --module-version #{target_version} \
                        --module FastActions \
                        --root-url http://dengyhgit.github.io/FastActions/ \
                        --output docs/ \
                        --theme fullwidth")
  end

  after_all do |lane|

  end

  error do |lane, exception|

  end
end
